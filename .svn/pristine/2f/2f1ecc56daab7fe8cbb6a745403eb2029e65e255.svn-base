package com.qixin.app.turntable.web;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import jxl.Workbook;
import jxl.write.Label;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;

import net.sf.json.JSONArray;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.qixin.app.system.user.model.SystemmgtUser;
import com.qixin.app.turntable.model.Award;
import com.qixin.app.turntable.model.LotteryRecord;
import com.qixin.app.turntable.model.Winners;
import com.qixin.app.turntable.service.TurntableService;
import com.qixin.app.zjminweb.common.CommonTool;
import com.qixin.app.zjminweb.model.Gift;
import com.qixin.app.zjminweb.service.GiftService;
import com.qixin.platform.log.CommonLogger;
import com.qixin.platform.persistent.database.basedao.PageFinder;
import com.qixin.platform.persistent.database.basedao.Query;
import com.sun.xml.internal.ws.api.config.management.policy.ManagedServiceAssertion.ImplementationRecord;

@Controller
@RequestMapping("/turentableManage")
public class SystemController
{

    @Resource
    private TurntableService services;

    @Resource
    private GiftService giftservices;

    private static final String CONTENT_TYPE = "text/html; charset=GBK";

    @RequestMapping("/toTurentableConfig")
    public ModelAndView toTurntable(String id, HttpServletRequest request)
    {

        Map<String, Object> map = new HashMap<String, Object>();

        map.put("info", services.getActivityInfo());
        map.put("awards", services.getAward());

        Object bido = request.getSession().getAttribute("login_system_user");
        SystemmgtUser systemUser = (SystemmgtUser) bido;
        String bid = systemUser.getId();
        try
        {
            map.put("giftlist", this.giftservices.getGiftListBybid(bid));
        }
        catch (Exception e)
        {
            CommonLogger.error("get Gift byBid出错 :", e);
            map.put("errorMsg", "出错了!");
            return new ModelAndView("warnframe", map);
        }

        return new ModelAndView("/app/turentable/turentableConfig", map);
    }

    @RequestMapping("/updateAwards")
    public ModelAndView updateAwards(HttpServletRequest request)
    {
        Map<String, Object> map = new HashMap<String, Object>();
        String[] id = request.getParameterValues("id");// 名称
        String[] name = request.getParameterValues("name");// 名称
        String[] prize = request.getParameterValues("prize");// 名称
        String[] min = request.getParameterValues("min");// 名称
        String[] max = request.getParameterValues("max");// 名称
        String[] num = request.getParameterValues("num");// 名称
        String[] v = request.getParameterValues("v");// 名称
        String info = request.getParameterValues("info")[0];// 名称
        String[] prompt = request.getParameterValues("prompt");
        String tip = request.getParameterValues("tip")[0];

        String[] giftid = request.getParameterValues("giftid");// 名称

        List<Award> award = new ArrayList<Award>();
        Award a = null;
        try
        {
            for (int i = 0; i < id.length; i++)
            {
                a = new Award();
                a.setId(Integer.parseInt(id[i]));
                a.setName(name[i]);
                a.setIsPrize(Integer.parseInt(prize[i]));
                a.setMax(Integer.parseInt(max[i]));
                a.setMin(Integer.parseInt(min[i]));
                a.setV(Integer.parseInt(v[i]));
                a.setPrompt(prompt[i]);

                a.setNum(Integer.parseInt(num[i]));
                if (!CommonTool.isEmpty(giftid[i]))
                {
                    a.setGiftid(giftid[i]);

                    // 查询原数目
                    Award aw = services.getAwardByid(Integer.parseInt(id[i]));

                    // 查询奖品信息
                    Gift gift = this.giftservices.getGiftByid(giftid[i]);
                    gift.setNumber(gift.getNumber()
                            + (aw.getNum() - Integer.parseInt(num[i])));
                    this.giftservices.updateGift(gift);
                }
                // else
                // {
                // a.setGiftid("");
                // }

                award.add(a);
            }
        }
        catch (Exception e)
        {
            CommonLogger.error("updateAwards出错 :", e);
            map.put("errorMsg", "出错了!");
            return new ModelAndView("warnframe", map);
        }
        services.updateAward(award);
        services.updateActivityInfo(info, tip);

        map.put("info", services.getActivityInfo());
        map.put("awards", award);

        return new ModelAndView("/app/turentable/turentableConfig", map);
    }

//    @RequestMapping("/toWinners")
//    public ModelAndView toWinners(@ModelAttribute("winners")
//    @Valid
//    Winners winners, String ids, Query query)
//    {
//
//        query = (query != null) ? query : new Query();
//
//        Map<String, Object> map = new HashMap<String, Object>();
//
//        if (ids != null && !ids.equals(""))
//            services.updateWinners(ids.split("\\|"));
//        PageFinder<Winners> list = services.getWinnersList(winners, query);
//        map.put("pageFinder", list);
//        map.put("winners", winners);
//
//        return new ModelAndView("/app/turentable/winnersList", map);
//    }

    
    
    @RequestMapping("/toWinners")
    public ModelAndView toLotteryRecordList(@ModelAttribute("LotteryRecord")
    @Valid
    LotteryRecord lRecord, String ids, Query query, HttpServletRequest request)
    {
    	query = (query != null) ? query : new Query();
        Map<String, Object> map = new HashMap<String, Object>();
        
        lRecord.setActivitiesid(request.getParameter("activitiesid"));
        PageFinder<LotteryRecord> list = services.getLotteryRecordList(lRecord, query);
        
        
        map.put("pageFinder", list);
        map.put("lRecord", lRecord);
        map.put("isGet", lRecord.getIsGet()==null?-1:lRecord.getIsGet());
        map.put("award",lRecord.getAward()==null?"-1":lRecord.getAward());
  
        
        
        return new ModelAndView("/app/turentable/LotteryRecordList", map);
    }
    
    
    
    
    
    // 兑奖接口
	@RequestMapping("/getAwardAjax")
	public void getAwardAjax(HttpServletRequest request,
			HttpServletResponse response) throws Throwable {
		String recordId = request.getParameter("recordId");
		LotteryRecord lotteryRecord = services.getLotteryRecordById(recordId);
		PrintWriter out = response.getWriter();
		try {
			if (lotteryRecord.getIsGet() == null
					|| lotteryRecord.getIsGet() == 0) {
				lotteryRecord.setIsGet(1);// 已兑奖
				lotteryRecord = this.services
						.updateLotteryRecord(lotteryRecord);
				JSONArray jsonArray = JSONArray.fromObject(lotteryRecord);
				out.print(jsonArray.toString());
			} else if (lotteryRecord != null && lotteryRecord.getIsGet() == 1) {
				out.print("[{\"hasGet\":\"1\"}]");
			}
		} finally {
			out.flush();
			out.close();
		}
	}
    
    
    
    
    @RequestMapping("/updateWinners")
    public ModelAndView updateWinners(@ModelAttribute("winners")
    @Valid
    Winners winners, Query query, String ids)
    {

        Map<String, Object> map = new HashMap<String, Object>();
        query = (query != null) ? query : new Query();
        String id[] = ids.split("\\|");
        Winners w = null;
        for (int i = 0; i < id.length; i++)
        {

            w = new Winners();
            w.setId(Integer.parseInt(id[i]));
            w.setTicket(1);
            // services.updateWinners(w);
        }

        PageFinder<Winners> list = services.getWinnersList(winners, query);
        map.put("pageFinder", list);
        return new ModelAndView("/app/turentable/winnersList", map);
    }

    @RequestMapping("/getWinnersToExcel")
    public void getCustomersToExcel(HttpServletRequest request,
            HttpServletResponse response)
    {

        String path = request.getRealPath(File.separator) + "兑奖信息.xls";
        System.out.println(path);
        try
        {
            // 打开文件
            WritableWorkbook book = Workbook.createWorkbook(new File(path));
            // 生成名为“第一页”的工作表，参数0表示这是第一页
            WritableSheet sheet = book.createSheet("兑奖信息", 0);
            // 在Label对象的构造子中指名单元格位置是第一列第一行(0,0)
            WritableCellFormat timesBoldUnderline = null;
            // 20号 粗体
            WritableFont font20 = new WritableFont(WritableFont.TIMES, 20,
                    WritableFont.BOLD, false);
            timesBoldUnderline = new WritableCellFormat(font20);
            // 水平居中
            timesBoldUnderline.setAlignment(jxl.format.Alignment.CENTRE);
            // 垂直居中
            timesBoldUnderline
                    .setVerticalAlignment(jxl.format.VerticalAlignment.CENTRE);
            // 全边框
            // timesBoldUnderline.setBorder(jxl.format.Border.ALL,jxl.format.BorderLineStyle.THIN);

            jxl.write.WritableCellFormat wcfF = new jxl.write.WritableCellFormat(
                    timesBoldUnderline);

            Label label = new Label(0, 0, "兑奖信息一览", wcfF);
            // label.
            sheet.mergeCells(0, 0, 6, 2);

            // 将定义好的单元格添加到工作表中
            sheet.addCell(label);

            String[] title = { "序号", "姓名", "电话", "公司", "部门", "奖项", "是否兑奖" };
            WritableCellFormat titleFontFormat = null;
            // 9号 粗体
            WritableFont titlefont12 = new WritableFont(WritableFont.TIMES, 15,
                    WritableFont.BOLD, false);
            titleFontFormat = new WritableCellFormat(titlefont12);
            titleFontFormat.setWrap(true);
            // 水平居中
            titleFontFormat.setAlignment(jxl.format.Alignment.CENTRE);
            // 垂直居中
            titleFontFormat
                    .setVerticalAlignment(jxl.format.VerticalAlignment.BOTTOM);

            for (int i = 0; i < title.length; i++)
            {
                Label label1 = new Label(i, 3, title[i], titleFontFormat);
                sheet.addCell(label1);
            }

            WritableCellFormat FontFormat = null;
            // 10号 粗体
            WritableFont font10 = new WritableFont(WritableFont.TIMES, 12,
                    WritableFont.NO_BOLD, false);
            FontFormat = new WritableCellFormat(font10);

            // 水平居中
            FontFormat.setAlignment(jxl.format.Alignment.CENTRE);
            // 垂直居中
            FontFormat
                    .setVerticalAlignment(jxl.format.VerticalAlignment.BOTTOM);

            // sheet.setRowView(4, 500);
            sheet.setColumnView(0, 10);
            sheet.setColumnView(1, 25);
            sheet.setColumnView(2, 25);
            sheet.setColumnView(3, 25);
            sheet.setColumnView(4, 25);
            sheet.setColumnView(5, 25);
            sheet.setColumnView(6, 25);

            List<Winners> wList = services.getWinnersList();
            Winners w = null;
            int num = 0;
            int i = 0;
            for (int j = 0; j < wList.size(); j++)
            {
                w = wList.get(j);

                i++;
                num = i + 3;
                // sheet.setRowView(num, 500);
                sheet.addCell(new Label(0, num, i + "", FontFormat));

                sheet.addCell(new Label(1, num, w.getName(), FontFormat));
                sheet.addCell(new Label(2, num, w.getTel(), FontFormat));
                sheet.addCell(new Label(3, num, w.getCompany(), FontFormat));
                sheet.addCell(new Label(4, num, w.getDepartment(), FontFormat));
                sheet.addCell(new Label(5, num, w.getAward(), FontFormat));
                sheet.addCell(new Label(6, num, w.getTicket() == 1 ? "已兑奖"
                        : "未兑奖", FontFormat));

            }

            // 写入数据并关闭文件
            book.write();
            book.close();

        }
        catch (Exception e)
        {
            System.out.println(e);
        }

        try
        {
            downFile(path, "兑奖信息.xls", request, response);
        }
        catch (IOException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    public void downFile(String path, String fileName, HttpServletRequest req,
            HttpServletResponse response) throws IOException
    {

        response.setContentType(CONTENT_TYPE);
        // 创建file对象
        File file = new File(path);
        // 设置response的编码方式
        response.setContentType("application/x-msdownload");
        // 写明要下载的文件的大小
        response.setContentLength((int) file.length());
        // 解决中文乱码
        response.setHeader("Content-Disposition", "attachment;filename="
                + new String(fileName.getBytes("gbk"), "iso-8859-1"));
        // 读出文件到i/o流
        FileInputStream fis = null;
        fis = new FileInputStream(file);
        BufferedInputStream buff = new BufferedInputStream(fis);
        byte[] b = new byte[1024];// 相当于我们的缓存
        long k = 0;// 该值用于计算当前实际下载了多少字节
        // 从response对象中得到输出流,准备下载
        OutputStream myout = null;
        myout = response.getOutputStream();

        // 开始循环下载

        while (k < file.length())
        {
            int j = 0;
            j = buff.read(b, 0, 1024);
            k += j;
            // 将b中的数据写到客户端的内存
            myout.write(b, 0, j);
        }
        // 将写入到客户端的内存的数据,刷新到磁盘
        myout.flush();
        myout.close();
        buff.close();
        fis.close();
        file.delete();

    }

}
